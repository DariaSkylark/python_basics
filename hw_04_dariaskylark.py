# ### Задача 1
# Что выведет программа?
# **Пример:**
# ```python
# x = 10
#
# def change_value():
#     x = 20
#
# change_value()
# print(x)  # что выведет программа?
# ```

# Решение к Задаче 1
# программа выведет 10 - глобальное значение х, определенное вне функции


# ### Задача 2
# Что выведет программа?
# ```python
# y = 5
#
# def modify_global():
#     global y
#     y = 10
#
# modify_global()
# print(y)  # что выведет программа?
# ```

# Решение к Задаче 2
# программа выведет 10 - измененное функцией значение глобальной переменной y


# ### Задача 3
# Что выведет программа?
# ```python
# a = 100
#
# def shadow_variable():
#     a = 200
#
# shadow_variable()
# print(a)  # что выведет программа?
# ```

# Решение к Задаче 3
# программа выведет 100 - значение глобальной переменной а


# ### Задача 4
# Что выведет программа?
# ```python
# z = 50
#
# def modify_variable(value):
#     value = value * 2
#     return value
#
# z = modify_variable(z)
# print(z)  # что выведет программа?
# ```

# Решение к Задаче 4
# программа выведет 100 - новое значение z, которое было возвращено функцией


# ### Задача 5
# Что выведет программа?
# ```python
# s = "Hello"
#
# def modify_string(string):
#     string = string + " World"
#
# modify_string(s)
# print(s)  # что выведет программа?
# ```

# Решение к Задаче 5
# программа выведет Hello World - измененное функцией значение строки s


# ### Задача 6
# Что выведет программа?
# ```python
# n = 10
#
# def first_function():
#     global n
#     n = 20
#
# def second_function():
#     first_function()
#
# second_function()
# print(n)  # что выведет программа?
# ```

# Решение к Задаче 6
# программа выведет 20 - новое значение глобальной переменной n, которое ей переприсвоила первая функция


# ### Задача 7
# Что выведет программа?
# ```python
# lst = [1, 2, 3]
# s = "Hello"
#
# def modify_list(l):
#     l.append(4)
#
# def modify_string(st):
#     st += " World"
#
# modify_list(lst)
# modify_string(s)
#
# print(lst)  # что выведет программа?
# print(s)  # что выведет программа?

# Решение к Задаче 7
# программа выведет [1, 2, 3, 4] - лист, дополненные с помощью функции modify_list
# программа выведет Hello World - строку, измененную функцией modify_string


# Задачи на модули
# ### Задача 1: Простое использование модуля
# Создайте два файла: один будет содержать основной код, а второй — модуль с функциями.
#
# **Условия:**
# 1. Создайте файл `math_operations.py`, в котором определите две функции:
#     - Функция `add(a, b)`, которая возвращает сумму двух чисел.
#     - Функция `multiply(a, b)`, которая возвращает произведение двух чисел.
# 2. В основном файле импортируйте функции из модуля и используйте их для выполнения операций.

# Решение к Задаче 1 на модули
# текст модуля math_operations.py
def add(a, b):
    sum_value = a + b
    return sum_value

def multiply(a, b):
    mult_value = a * b
    return mult_value

#текст основной программы
import math_operations

print(math_operations.add(5, 10))
print(math_operations.multiply(5, 10))


# ### Задача 2: Переименование модуля при импорте
# Измените имена импортируемых функций с помощью ключевого слова `as`, чтобы избежать конфликтов имен
# и сделать код более читаемым.
#
# **Условия:**
# 1. Используйте тот же модуль `math_operations`, но импортируйте функции с переименованными именами
# (импортируйте `math_operations` как `mo`).
# 2. Измените имена так, чтобы функции `add` и `multiply` стали `sum_` и `prod_` соответственно.


# Решение к Задаче 2 на модули

# текст модуля math_operations.py без изменений

# текст основной программы
import math_operations as mo
from  math_operations import add as sum_, multiply as prod_

print(sum_(5, 10))
print(prod_(5, 10))


# ### Задача 3: Использование `__name__ == "__main__"`
# Создайте модуль, который при импорте выполняет функцию, а при прямом запуске будет выводить "Это главный модуль".
#
# **Условия:**
# 1. Создайте файл `test_module.py`, в котором:
#     - При прямом запуске модуля выводится строка `"Это главный модуль"`.
#     - При импорте модуля вызывается функция, которая выводит `"Этот модуль был импортирован"`.

# Решение к Задаче 3 на модули
# текст модуля test_module.py
if __name__ == "__main__":
    print("Это главный модуль")

else:
    print("Этот модуль был импортирован")

# текст основной программы
import test_module


# ### Задача 4: Создание собственного модуля
# Напишите модуль, который предоставляет несколько функций для работы с датами, и используйте его в основном файле.
#
# **Условия:**
# 1. Напишите модуль `date_utils.py`, который будет содержать:
#     - Функцию `get_current_date()`, возвращающую текущую дату в формате `YYYY-MM-DD`.
#     - Функцию `days_between(date1, date2)`, которая возвращает количество дней между двумя датами.
# 2. Используйте этот модуль в основном файле, чтобы получить текущую дату и рассчитать количество дней между двумя датами.

# Решение к Задаче 4 на модули
# текст модуля date_utils.py
import datetime as dt

def get_current_date():
    current_date = dt.datetime.now()
    return current_date.strftime("%Y-%m-%d")

def days_between(date1, date2):
    date1_ts = date1.timestamp()
    date2_ts = date2.timestamp()

    if date1_ts > date2_ts:
        ts_diff = date1_ts - date2_ts
        days_diff = int(ts_diff / 86400)
        print(f"Разница между датой 1 и датой 2 составляет: {days_diff} дней.")

    if date2_ts > date1_ts:
        ts_diff = date2_ts - date1_ts
        days_diff = int(ts_diff / 86400)
        print(f"Разница между датой 2 и датой 1 составляет: {days_diff} дней.")

    if date2_ts == date1_ts:
        print("Даты одинаковые.")

# текст основной программы
import datetime as dt
import date_utils as du

print(f"Текущая дата: {du.get_current_date()}")

user_date1_str = input("Пожалуйста введите дату 1 в формате ГГГГ-ММ-ДД: ")
user_date1 = dt.datetime.strptime(user_date1_str, "%Y-%m-%d")

user_date2_str = input("Пожалуйста введите дату 2 в формате ГГГГ-ММ-ДД: ")
user_date2 = dt.datetime.strptime(user_date2_str, "%Y-%m-%d")

du.days_between(user_date1, user_date2)


# ### Задача 5: Использование встроенных модулей
# Напишите программу, которая использует стандартные модули для выполнения нескольких задач.
#
# **Условия:**
# 1. Используйте модуль `random` для генерации случайного числа в диапазоне от 1 до 100.
# 2. Используйте модуль `datetime` для получения текущей даты и времени.


# Решение к Задаче 5 на модули
import random as ran
import datetime as dt

print(f"Ваше случайно сгенерированное число от  1 до 100: {ran.randrange(1, 101)}")

print(f"Текущая дата и время: {dt.datetime.now()}")
